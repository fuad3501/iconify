import { type NextPage } from "next";
import Head from "next/head";
import { Input} from "~/components/Input";
import { FormGroup } from "~/components/FormGroup";
import { Button } from "~/components/Button"
import React, { useState } from "react";
import { api } from "~/utils/api";
import { useSession } from "next-auth/react";
import Image from "next/image";

const colours = ['blue', 'green', 'red', 'yellow', 'purple', 'black', 'cyan', 'magenta']

const GeneratePage: NextPage = () => {
  
  const [form, setForm] = useState({
    prompt: "",
    colour: "",
  });
  
  const [image, setImage] = useState('')


  // Tracks form inputs into state
  function updateForm(key: string){
    return function (e: React.ChangeEvent<HTMLInputElement>){
        setForm((prev) => ({
            ...prev, 
            [key]: e.target.value, 
        }));
    }
  }

  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data){
        console.log("mutation finished", data.imageURL);
        if (!data.imageURL) return
        setImage(data.imageURL)
    }
  });

  // function to submit form data to the backend
  function handleFormSubmit(e: React.FormEvent){
    e.preventDefault();
    generateIcon.mutate({
        prompt: form.prompt,
        colour: form.colour,
    });
    // setForm((prev) => ({...prev, prompt: ""}));        // resets prompt to blank
  }

  const session = useSession();        // Get login status
  const isLoggedIn = !!session.data;   // force to a boolean by doing double NOT


  return (
    <>
      <Head>
        <title>Iconify :: Generate</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex flex-col min-h-screen px-80 mt-24 gap-4">
        <h1 className="text-6xl">Generate your Icons</h1>
        <p className="text-2xl mb-12">Enter the fields below: </p>
        
        <form className="flex flex-col gap-4" onSubmit={handleFormSubmit}>

            <h2 className="text-xl">1. Describe what you want your icon to look like</h2>    
            <FormGroup className="mb-12">
                <label>Description</label>
                <Input value={form.prompt} onChange={updateForm("prompt")}></Input>
            </FormGroup>

            <h2 className="text-xl">2. Describe what colour you would like the icon to be</h2>    
            <FormGroup className="mb-12 grid grid-cols-4">
                {colours.map(colour => (
                  <label className="flex gap-2 text-xl" key={colour}>
                  <input type="radio" name="colour" value={colour} onChange={() => setForm((prev) => ({...prev, colour}))} checked={colour===form.colour}></input>
                  {colour}
                  </label>
                ))}

                
            </FormGroup>
            
            <Button disabled={generateIcon.isLoading} isLoading={generateIcon.isLoading} className="disabled:bg-gray-600">Generate</Button>
        
        </form>
        
        {image &&
        <>
        <h2 className="text-xl">Your Icons</h2>
        <section className="grid grid-cols-4 gap-4 mb-12">
        <Image src={image} alt="Generated Image" width="100" height="100" className="w-full" />
        </section>
        </>
        }
      </main>
    </>
  );
};

export default GeneratePage;

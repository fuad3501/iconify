import { type NextPage } from "next";
import Head from "next/head";
import { Input} from "~/components/Input";
import { FormGroup } from "~/components/FormGroup";
import { Button } from "~/components/Button"
import React, { useState } from "react";
import { api } from "~/utils/api";
import { signIn, signOut, useSession } from "next-auth/react";
import Image from "next/image";

const GeneratePage: NextPage = () => {
  
  const [form, setForm] = useState({
    prompt: "",
  });
  
  const [image, setImage] = useState('')

  // Tracks form inputs into state
  function updateForm(key: string){
    return function (e: React.ChangeEvent<HTMLInputElement>){
        setForm((prev) => ({
            ...prev, 
            [key]: e.target.value, 
        }));
    }
  }

  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data){
        console.log("mutation finished", data.imageURL);
        if (!data.imageURL) return
        setImage(data.imageURL)
    }
  });

  // function to submit form data to the backend
  function handleFormSubmit(e: React.FormEvent){
    e.preventDefault();
    generateIcon.mutate({
        prompt: form.prompt
    });
    setForm({prompt: ""});        // resets prompt to blank
  }

  const session = useSession();        // Get login status
  const isLoggedIn = !!session.data;   // force to a boolean by doing double NOT


  return (
    <>
      <Head>
        <title>Iconify :: Generate</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        
        {/* only shows button if isLoggedIn is True */}
        {!isLoggedIn && 
        (<Button onClick={() => {
            signIn().catch(console.error);
            }}>Login</Button>)
        }

        {/* only shows button if isLoggedIn is False */}
        {isLoggedIn && 
        (<Button onClick={() => {
            signOut().catch(console.error);
            }}>Logout</Button>)
        }

        {/* Show Username */}
        {session.data?.user.name}

        <form className="flex flex-col gap-4" onSubmit={handleFormSubmit}>
            
            <FormGroup>
                <label>Prompt 1</label>
                <Input value={form.prompt} onChange={updateForm("prompt")}></Input>
            </FormGroup>
            
            <Button>Generate</Button>
        
        </form>
        
        {/* <img src={image} alt="" width="100" height="100"></img> */}
        <Image src={image} alt="Generated Image" width="100" height="100" />
        {/* <img src={`data:image/png;base64, ${image}`} alt="Generated Image" width="100" height="100" ></img> */}
      </main>
    </>
  );
};

export default GeneratePage;
